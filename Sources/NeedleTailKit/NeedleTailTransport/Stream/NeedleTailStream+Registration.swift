//
//  NeedleTailStream+Registration.swift
//
//
//  Created by Cole M on 1/15/24.
//

import NeedleTailHelpers

extension NeedleTailStream {
    
    /// We receive the messageId via a **QRCode** from the **Child Device** we will emit this id to the **Master's Client** in order to generate an approval **QRCode**.
    /// - Parameter messageId: The message request identity generated by the **Child Device**
    func receivedRegistryRequest(_ messageId: String) async throws {
#if (os(macOS) || os(iOS))
        Task { @MainActor [weak self] in
            guard let self else { return }
            await configuration.messenger.emitter.requestMessageId = messageId
        }
#endif
    }
    
    /// If the approval code matches the code that the requesting device temporarily store it then let the requesting client know that the master devices has approved of the registration of this device.
    func computeApproval(_ code: String) async -> Bool {
        if self.registryRequestId == code {
            self.registryRequestId = ""
            return true
        }
        return false
    }
    
    /// This method is called on the Dispatcher, After the master device adds the new Device locally and then sends it to the server to be saved
    func receivedNewDevice(_ deviceState: NewDeviceState, contacts: [NTKContact]) async throws {
        self.receivedNewDeviceAdded = deviceState
        try await addMasterDevicesContacts(contacts)
#if (os(macOS) || os(iOS))
        Task { @MainActor [weak self] in
            guard let self else { return }
            await self.clearNewDeviceState(configuration.messenger)
        }
#endif
    }
    
    func addMasterDevicesContacts(_ contactList: [NTKContact]) async throws {
        for contact in contactList {
            let createdContact = try await configuration.ntkBundle.cypher?.createContact(byUsername: contact.username)
            try await createdContact?.setNickname(to: contact.nickname)
        }
    }
    
    @MainActor
    private func clearNewDeviceState(_ messenger: NeedleTailMessenger) {
#if (os(macOS) || os(iOS))
        messenger.emitter.qrCodeData = nil
        messenger.emitter.showProgress = false
        messenger.emitter.dismissRegistration = true
#endif
    }
}
